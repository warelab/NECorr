#options(repos = BiocInstaller::biocinstallRepos())
# options(repos=structure(BiocManager::repositories()))
setwd("~/Documents/GitHub/NECorr/")
#Rcpp::compileAttributes()
devtools::load_all()
res1 <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM", verbose= 0)
necorr_graph <- function(hubnet, hub.int.significant){
# link activator and hub significant sub-networks
sig.hub <- unique(c(as.character(hub.int.significant$V1),
as.character(hub.int.significant$V2)))
if((nrow(hubnet)>0) == TRUE){
#print(hub.act.net)
g <- graph.data.frame(hubnet, directed = T)
vcolors <- rep("cyan",length(V(g)$name))
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
vsize.hub <- as.numeric(gene.rank.h[V(g)$name[which(V(g)$name %in% sig.hub)],1])
vsize.hub <- 2^(ScalN(vsize.hub) + 2.21)
temp <- as.data.frame(gene.rank.act.significant)
rownames(temp) <- temp[,1]
vsize.act  <- as.numeric(temp[V(g)$name[which(V(g)$name %in% temp[,1])],2])
vsize.act <- 2^(ScalN(vsize.act) + 2.21)
vsize <- c(vsize.act,vsize.hub)
vlabel <- as.character(Desc[V(g)$name,"Associated.Gene.Name"])
if (is.finite(vsize) & vsize>0){
# 	    mark.groups <- vcolors
# 	    mark.col <- visColoralpha(vcolors, alpha=0.2)
# 	    mark.border <- visColoralpha(vcolors, alpha=0.2)
#
# 	    mark.groups= mark.groups,mark.col= mark.col, mark.border=mark.border,
# pdf(file = title, width = 10, height = 10)
netgraph <- dnet::visNet(g, glayout=layout.fruchterman.reingold(g) ,
vertex.shape="sphere",
vertex.label = vlabel, edge.color = "grey",
edge.arrow.size = 0.3, vertex.color = vcolors,
vertex.frame.color = vcolors, newpage = F)
return(netgraph)
}
}
else{
message("no network can be drawn")
}
}
res1$up_activator_gene_rank
head(res1$up_activator_gene_rank)
signif.net <- res1$act_hub_interaction_rank
g <- graph.data.frame(signif.net, directed = T)
sig.hub <- res1$up_activator_gene_rank
sig.hub <- res1$up_activator_gene_rank$gene
vcolors <- rep("cyan",length(V(g)$name))
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
res1$hub_gene_rank
head(res1$hub_gene_rank)
head(res1$up_activator_gene_rank)
head(res1$down_effector_gene_rank)
head(res1$hub_interaction_rank)
head(res1$Gini_interaction)
head(res1$act_hub_interaction_rank)
#Rcpp::compileAttributes()
devtools::load_all()
res1 <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM", verbose= 0)
df = data.frame(
col1 = c('A', 'B', 'C', 'J', 'E', NA,'M'),
col2 = c(12.5, 9, 16.5, NA, 9, 20, 14.5),
col3 = c(NA, 3, 2, NA, 1, NA, 0))
df
colnames(df)[c(1,2)] <- c("ds1", "ds2")
df
colnames(df)[1,2] <- c("ds1", "ds2")
#Rcpp::compileAttributes()
devtools::load_all()
res1 <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM", verbose= 0)
#Rcpp::compileAttributes()
devtools::load_all()
res1 <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM", verbose= 0)
head(res1$down_effectors)
#Rcpp::compileAttributes()
devtools::load_all()
res1 <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM", verbose= 0)
#Rcpp::compileAttributes()
devtools::load_all()
res1 <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM", verbose= 0)
#Rcpp::compileAttributes()
devtools::load_all()
res1 <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM", verbose= 0)
#Rcpp::compileAttributes()
devtools::load_all()
res1 <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM", verbose= 0)
#Rcpp::compileAttributes()
devtools::load_all()
res1 <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM", verbose= 0)
res1 <- resNecorr
resNecorr <- res1
signif.net <- resNecorr$up_hub_interactions
sig.hub <- resNecorr$up_activators$Gene
hub.gene <- resNecorr$
resNecorr
hub.gene <- resNecorr$hub_genes
head(resNecorr$hub_genes)
hub.gene <- resNecorr$hub_genes
hub.gene <- resNecorr$hub_genes$Gene
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
# node colors (vertex)
vcolors <- rep("grey",length(V(g)$name))
sig.hub <- resNecorr$up_activators$Gene
# use the significant network genes
signif.net <- resNecorr$up_hub_interactions
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
length(signif.net)
nrow(signif.net)
netgraph <- dnet::visNet(g, glayout=layout.fruchterman.reingold(g) ,
vertex.shape="sphere")
head(resNecorr$up_hub_interactions, 30)
nbinteractions <- 5
nbinteractions <- 10
signif.net <- resNecorr$up_hub_interactions
signif.net <- signif.net[order(signif.net$score, decreasing = T),]
signif.net <- signif.net[c(1:nbinteractions),]
sig.hub <- resNecorr$up_activators$Gene
hub.gene <- resNecorr$hub_genes$Gene
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
vcolors <- rep("grey",length(V(g)$name))
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
vcolors[which(V(g)$name %in% hub.gene)] <- "cyan"
# node size: hub score are used here
vsize <- rep(1,length(V(g)$name))
dnet::visNet(g, glayout=layout.fruchterman.reingold(g) ,
vertex.shape="sphere")
nbinteractions <- 100
signif.net <- resNecorr$up_hub_interactions
signif.net <- signif.net[order(signif.net$score, decreasing = T),]
signif.net <- signif.net[c(1:nbinteractions),]
sig.hub <- resNecorr$up_activators$Gene
hub.gene <- resNecorr$hub_genes$Gene
if((nrow(hubnet)>0) == TRUE){
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
}
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
isNet(g, glayout=layout.fruchterman.reingold(g) ,
vertex.shape="sphere"
)
visNet(g, glayout=layout.fruchterman.reingold(g) ,
vertex.shape="sphere")
dnet::visNet(g, glayout=layout.fruchterman.reingold(g) ,
vertex.shape="sphere")
res1
getwd()
install.packages("visNetwork")
library(visNetwork)
test <- 2^(ScalN(resNecorr$hub_genes$Node_Hub.Ranking) + 2.21
)
#' ScalN
#' @description rescaling data in a range between 0 to 1
#' @param x vector that need to be rescaled
#' @param ... other paramter that can be passed on
#' @return res
#' @export
ScalN <- function(x, ...) {
res <- (x - min(x, ...))/(max(x, ...) - min(x, ...))
return(res)
}
test <- 2^(ScalN(resNecorr$hub_genes$Node_Hub.Ranking) + 2.21
)
tes
test
test <- ScalN(resNecorr$hub_genes$Node_Hub.Ranking)
test
test <- ScalN(as.numeric(resNecorr$hub_genes$Node_Hub.Ranking))
test
as.numeric(resNecorr$hub_genes$Node_Hub.Ranking)
ScalN(resNecorr$hub_genes$Node_Hub.Ranking)
range(resNecorr$hub_genes$Node_Hub.Ranking)
is.na(resNecorr$hub_genes$Node_Hub.Ranking) <- 0
range(resNecorr$hub_genes$Node_Hub.Ranking)
resNecorr$hub_genes$Node_Hub.Ranking
typeof(resNecorr$hub_genes$Node_Hub.Ranking)
summary(resNecorr$hub_genes$Node_Hub.Ranking)
ScalN(resNecorr$hub_genes$Node_Hub.Ranking)
resNecorr$hub_genes$Node_Hub.Ranking[75594]
is.na(resNecorr$hub_genes$Node_Hub.Ranking)
hubRank <- resNecorr$hub_genes$Node_Hub.Ranking
hubRank[is.na(hubRank)] <- 0
ScalN(hubRank)
2^(ScalN(hubRank) + 2)
head(resNecorr$hub_genes)
head(V(g))
g
V(g)$name
vcolors[which(V(g)$name %in% hub.gene)] <- "cyan"
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
library(igraph)
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
V(g)
length(V(g))
which(V(g)$name %in% hub.gene)
which(V(g)$name %in% sig.hub)
which(hub.gene %in% V(g)$name)
hub.gene[which(hub.gene %in% V(g)$name)]
resNecorr$hub_genes[which(resNecorr$hub_genes$Gene %in% V(g)$name),]
resNecorr$hub_genes[which(resNecorr$hub_genes$Gene %in% V(g)$name), c(1:3)]
V(g)$name)
V(g)$name
test <- resNecorr$hub_genes[which(resNecorr$hub_genes$Gene %in% V(g)$name), c(1:3)]
test[V(g)$name,]
test[which(V(g)$name %in%test$Gene,]
test[which(V(g)$name %in%test$Gene),]
roenames(test) <- test$Gene
rownames(test) <- test$Gene
test[V(g)$name,]
hubRank <- resNecorr$hub_genes$Node_Hub.Ranking
hubRank[is.na(hubRank)] <- 0
resNecorr$hub_genes$Node_Hub.Ranking <- 2^(ScalN(hubRank) + 2)
# extract the data now in the order of the vertices in igraph
resV <- resNecorr$hub_genes[which(resNecorr$hub_genes$Gene %in% V(g)$name), c(1:3)]
rownames(resV) <- resV$Gene
resV <- resVt[V(g)$name,]
resV <- resNecorr$hub_genes[which(resNecorr$hub_genes$Gene %in% V(g)$name), c(1:3)]
rownames(resV) <- resV$Gene
resV <- resV[V(g)$name,]
resV
vcolors[which(V(g)$name %in% hub.gene)] <- "cyan"
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
V(g)$color <- vcolors
# node size: hub score are used here
V(g)$size <- resV$Node_Hub.Ranking
V(g)$label <- rev$Node_Associated.Gene.Name
V(g)$label.cex = seq(1, 2,length.out = 8)
V(g)$label.color = "black"
visIgraph(g, layout = "layout.circle", idToLabel = TRUE)
g <- graph.data.frame(signif.net, directed = T)
# node colors (vertex)
vcolors <- rep("grey",length(V(g)$name))
vcolors[which(V(g)$name %in% hub.gene)] <- "cyan"
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
V(g)$color <- vcolors
# node size: hub score are used here
V(g)$size <- resV$Node_Hub.Ranking
#V(g)$label <- rev$Node_Associated.Gene.Name
#V(g)$label.cex = seq(1, 2,length.out = 8)
V(g)$label.color = "black"
visIgraph(g, layout = "layout.fruchterman.reingold", idToLabel = TRUE)
?visNetwork
?igraph
g <- graph.data.frame(signif.net, directed = T)
# node colors (vertex)
vcolors <- rep("grey",length(V(g)$name))
vcolors[which(V(g)$name %in% hub.gene)] <- "cyan"
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
V(g)$color <- vcolors
# node size: hub score are used here
V(g)$size <- resV$Node_Hub.Ranking
#V(g)$label <- rev$Node_Associated.Gene.Name
#V(g)$label.cex = seq(1, 2,length.out = 8)
V(g)$label.color = "black"
# edge
E(g)$color <- "grey"
#E(g)$weight <-
E(g)$arrow.size <- 0.3
#netgraph <-
visIgraph(g,
layout = "layout.fruchterman.reingold",
idToLabel = TRUE)
resNecor <- res1
signif.net <- resNecorr$up_hub_interactions
signif.net <- signif.net[order(signif.net$score, decreasing = T),]
signif.net <- signif.net[c(1:nbinteractions),]
sig.hub <- resNecorr$up_activators$Gene
# extract significant hub genes
hub.gene <- resNecorr$hub_genes$Gene
# extract and transform hub rank for node size
hubRank <- resNecorr$hub_genes$Node_Hub.Ranking
hubRank[is.na(hubRank)] <- 0
resNecorr$hub_genes$Node_Hub.Ranking <- 3^(ScalN(hubRank) + 2)
# extract the data now in the order of the vertices in igraph
resV <- resNecorr$hub_genes[which(resNecorr$hub_genes$Gene %in% V(g)$name), c(1:3)]
rownames(resV) <- resV$Gene
resV <- resV[V(g)$name,]
if((nrow(signif.net)>0) == TRUE){
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
# node colors (vertex)
vcolors <- rep("grey",length(V(g)$name))
vcolors[which(V(g)$name %in% hub.gene)] <- "cyan"
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
V(g)$color <- vcolors
# node size: hub score are used here
V(g)$size <- resV$Node_Hub.Ranking
#V(g)$label <- rev$Node_Associated.Gene.Name
#V(g)$label.cex = seq(1, 2,length.out = 8)
V(g)$label.color = "black"
# edge
E(g)$color <- "grey"
#E(g)$weight <-
E(g)$arrow.size <- 0.2
#netgraph <-
visIgraph(g,
layout = "layout.fruchterman.reingold",
idToLabel = TRUE)
resNecor <- res1
signif.net <- resNecorr$up_hub_interactions
signif.net <- signif.net[order(signif.net$score, decreasing = T),]
signif.net <- signif.net[c(1:nbinteractions),]
sig.hub <- resNecorr$up_activators$Gene
# extract significant hub genes
hub.gene <- resNecorr$hub_genes$Gene
# extract and transform hub rank for node size
hubRank <- resNecorr$hub_genes$Node_Hub.Ranking
hubRank[is.na(hubRank)] <- 0
resNecorr$hub_genes$Node_Hub.Ranking <- log10(ScalN(hubRank) + 2)
# extract the data now in the order of the vertices in igraph
resV <- resNecorr$hub_genes[which(resNecorr$hub_genes$Gene %in% V(g)$name), c(1:3)]
rownames(resV) <- resV$Gene
resV <- resV[V(g)$name,]
if((nrow(signif.net)>0) == TRUE){
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
# node colors (vertex)
vcolors <- rep("grey",length(V(g)$name))
vcolors[which(V(g)$name %in% hub.gene)] <- "cyan"
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
V(g)$color <- vcolors
# node size: hub score are used here
V(g)$size <- resV$Node_Hub.Ranking
#V(g)$label <- rev$Node_Associated.Gene.Name
#V(g)$label.cex = seq(1, 2,length.out = 8)
V(g)$label.color = "black"
# edge
E(g)$color <- "grey"
#E(g)$weight <-
E(g)$arrow.size <- 0.2
#netgraph <-
visIgraph(g,
layout = "layout.fruchterman.reingold",
idToLabel = TRUE)
resNecor <- res1
signif.net <- resNecorr$up_hub_interactions
signif.net <- signif.net[order(signif.net$score, decreasing = T),]
signif.net <- signif.net[c(1:nbinteractions),]
sig.hub <- resNecorr$up_activators$Gene
# extract significant hub genes
hub.gene <- resNecorr$hub_genes$Gene
# extract and transform hub rank for node size
hubRank <- resNecorr$hub_genes$Node_Hub.Ranking
hubRank[is.na(hubRank)] <- 0
resNecorr$hub_genes$Node_Hub.Ranking <- 4^(ScalN(hubRank) + 2)
# extract the data now in the order of the vertices in igraph
resV <- resNecorr$hub_genes[which(resNecorr$hub_genes$Gene %in% V(g)$name), c(1:3)]
rownames(resV) <- resV$Gene
resV <- resV[V(g)$name,]
if((nrow(signif.net)>0) == TRUE){
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
# node colors (vertex)
vcolors <- rep("grey",length(V(g)$name))
vcolors[which(V(g)$name %in% hub.gene)] <- "cyan"
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
V(g)$color <- vcolors
# node size: hub score are used here
V(g)$size <- resV$Node_Hub.Ranking
#V(g)$label <- rev$Node_Associated.Gene.Name
#V(g)$label.cex = seq(1, 2,length.out = 8)
V(g)$label.color = "black"
# edge
E(g)$color <- "grey"
#E(g)$weight <-
E(g)$arrow.size <- 0.2
#netgraph <-
visIgraph(g,
layout = "layout.fruchterman.reingold",
idToLabel = TRUE)
}
}
}
resNecor <- res1
signif.net <- resNecorr$up_hub_interactions
signif.net <- signif.net[order(signif.net$score, decreasing = T),]
signif.net <- signif.net[c(1:nbinteractions),]
sig.hub <- resNecorr$up_activators$Gene
# extract significant hub genes
hub.gene <- resNecorr$hub_genes$Gene
# extract and transform hub rank for node size
hubRank <- resNecorr$hub_genes$Node_Hub.Ranking
hubRank[is.na(hubRank)] <- 0
resNecorr$hub_genes$Node_Hub.Ranking <- 3^(ScalN(hubRank) + 2)
# extract the data now in the order of the vertices in igraph
resV <- resNecorr$hub_genes[which(resNecorr$hub_genes$Gene %in% V(g)$name), c(1:3)]
rownames(resV) <- resV$Gene
resV <- resV[V(g)$name,]
#graph initialization
g <- graph.data.frame(signif.net, directed = T)
# node colors (vertex)
vcolors <- rep("grey",length(V(g)$name))
vcolors[which(V(g)$name %in% hub.gene)] <- "cyan"
vcolors[which(V(g)$name %in% sig.hub)] <- "red"
V(g)$color <- vcolors
# node size: hub score are used here
V(g)$size <- resV$Node_Hub.Ranking
#V(g)$label <- rev$Node_Associated.Gene.Name
#V(g)$label.cex = seq(1, 2,length.out = 8)
V(g)$label.color = "black"
# edge
E(g)$color <- "grey"
#E(g)$weight <-
E(g)$arrow.size <- 0.2
#netgraph <-
visIgraph(g,
layout = "layout.fruchterman.reingold",
idToLabel = TRUE)
rm(list=ls())
setwd("~/Documents/GitHub/NECorr/")
#Rcpp::compileAttributes()
devtools::load_all()
Res <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/dapnet.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM",
permutation = 1000)
graphRes <- necorr_graph(Res, nbinteractions=100)
setwd("~/Documents/GitHub/NECorr/")
#Rcpp::compileAttributes()
devtools::load_all()
setwd("~/Documents/GitHub/NECorr/")
#Rcpp::compileAttributes()
devtools::load_all()
setwd("~/Documents/GitHub/NECorr/")
#Rcpp::compileAttributes()
devtools::load_all()
raphRes <- necorr_graph(Res, nbinteractions=100)
V
setwd("~/Documents/GitHub/NECorr/")
#Rcpp::compileAttributes()
devtools::load_all()
?V
graphRes <- necorr_graph(Res, nbinteractions=100)
setwd("~/Documents/GitHub/NECorr/")
#Rcpp::compileAttributes()
devtools::load_all()
graphRes <- necorr_graph(Res, nbinteractions=100)
setwd("~/Documents/GitHub/NECorr/")
#Rcpp::compileAttributes()
devtools::load_all()
graphRes <- necorr_graph(Res, nbinteractions=100)
graphRes
names(res)
names(Res)
Res$hub_genes
AtRegNet <- read_csv("~/Desktop/necorr analysis/AtRegNet.csv")
library(readr)
AtRegNet <- read_csv("~/Desktop/necorr analysis/AtRegNet.csv")
View(AtRegNet)
View(AtRegNet)
ResMeta <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/metaNeFlt1.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM",
permutation = 1000)
graphResMeta <- necorr_graph(ResMeta, nbinteractions=100)
ResAranet <- Necorr(expression = "~/Desktop/necorr analysis/gene_expression_matrix.txt",
networkFile = "~/Desktop/necorr analysis/AraNet.txt",
description.file = "~/Desktop/necorr analysis/Ath.GeneDesc.csv",
metadata = "~/Desktop/necorr analysis/sample_info.txt",
condition = "RAM",
permutation = 1000)
graphResAranet <- necorr_graph(ResAranet, nbinteractions=100)
graphResMeta
graphResAranet
