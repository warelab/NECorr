#' multiCorr
#' @description Calculate GCC, PCC, SCC, KCC correlations in one fast C++ parallel pass.
#' @param expression Numeric matrix (genes x samples).
#' @param edges Data frame with 'source' and 'target'.
#' @param methods Character vector of methods to return.
#' @param pernum Number of permutations for GCC significance.
#' @param useBestGCC Logical, whether to use the best GCC method.
#' @param asymmetricGCC Logical, whether to compute asymmetric GCC.
#' @return Data frame with correlations and p-values.
#' @export
multiCorr <- function(expression, edges,
                      methods = c("GCC", "PCC", "SCC", "KCC"),
                      pernum = 0,
                      useBestGCC = FALSE, asymmetricGCC = FALSE) {

  if (is.data.frame(expression)) expression <- as.matrix(expression)
  stopifnot(is.matrix(expression), all(c("source", "target") %in% colnames(edges)))

  gene_index <- setNames(seq_len(nrow(expression)), rownames(expression))
  src_idx <- gene_index[edges$source]
  tgt_idx <- gene_index[edges$target]

  # Strict filtering
  valid_edges <- !is.na(src_idx) & !is.na(tgt_idx) &
    src_idx >= 1 & src_idx <= nrow(expression) &
    tgt_idx >= 1 & tgt_idx <= nrow(expression)

  if (!any(valid_edges)) stop("No valid edges after filtering!")

  ranks <- matrix(
    apply(expression, 1, function(row) rank(row, ties.method = "first") - 1),
    nrow = nrow(expression), byrow = TRUE
  )
  storage.mode(ranks) <- "integer"

  #wt <- 2 * (seq_len(ncol(expression))) - ncol(expression) - 1

  res_cpp <- multi_corr_necorr(
    expression, ranks,
    as.integer(src_idx[valid_edges] - 1),
    as.integer(tgt_idx[valid_edges] - 1),
    as.integer(pernum),
    useBestGCC,
    asymmetricGCC
  )
  # Convert to data.table and bind to edges
  cpp_dt <- as.data.table(res_cpp)
  out <- cbind(edges, cpp_dt)
  # Filter for requested methods only
  keep_cols <- c("source", "target")
  for (m in methods) {
    keep_cols <- c(keep_cols, m, paste0(m, "_pvalue"))
    if (m == "GCC") keep_cols <- c(keep_cols, "GCC1", "GCC2")
  }
  return(out[, ..keep_cols])
}
